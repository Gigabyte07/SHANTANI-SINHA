#include<lpc2148.h>

void delay(void);
void cmd(int ) ;
void dat(int );
void strdisp(unsigned char *str);
int send_dat(int ch);
int rec_dat(void);
void enroll(void);
void compare(void);
//void select_mode();

#define sw (IO0PIN & (1<<15))                                 //define switch

unsigned char buff[12];

int capture[]={0xef, 0x01, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x03, 0x01, 0x00, 0x05} ; 

int character[]={0xef, 0x01, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x04, 0x02, 0x01, 0x00, 0x08} ;

int gen_template[]={0xef, 0x01, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x03, 0x05, 0x00, 0x09} ;

int store_template[]={0xef, 0x01, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00, 0x0e} ;

int read_template[]={0xef, 0x01, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x06, 0x07, 0x01, 0x00, 0x00, 0x00, 0x0f}; 

int del_template[]={0xef, 0x01, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x07, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x09}; 

int search[]={0xef, 0x01, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x08, 0x04, 0x01, 0x00, 0x01, 0x00,0x05, 0x00, 0x13}; 
		
int match[]={0xef, 0x01, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x03, 0x03, 0x00, 0x07};


void delay(void)
{
int i,j;
for(i=0;i<=1000;i++)
for(j=0;j<=100;j++);
}

void strdisp(unsigned char *str)
{
while(*str!='\0')
{
dat(*str);
str++;
}}

void cmd(int x)
{
int y=x;
int z=x;
IO1CLR|=(1<<23);
IO1CLR|=(1<<24);
IO1CLR|=(1<<22);
IO0CLR|=0xFFFFFFFF;
IO0SET|=(y<<6);
delay();
IO1SET|=(1<<22);
delay();
IO1CLR|=(1<<22);
delay();
IO1SET|=(1<<22);
IO0CLR|=0xFFFFFFFF;
IO0SET|=(z<<10);
delay();
IO1CLR|=(1<<22);
}

void dat(int x)
{
int y=x;
int z=x;
IO1CLR|=(1<<23);  
IO1SET|=(1<<24);
IO1CLR|=(1<<22);
IO0CLR|=0xFFFFFFFF;
IO0SET|=(y<<6);
delay();
IO1SET|=(1<<22);
delay();
IO1CLR|=(1<<22);

delay();
IO1SET|=(1<<22);
IO0CLR|=0xFFFFFFFF;
IO0SET|=(z<<10);
delay();
IO1CLR|=(1<<22);
}

int send_dat(int ch)
{
if(ch=='\n')
{
while(!(U0LSR&0x20));
U0THR=0x0D;	
}
while(!(U0LSR&0x20));
return(U0THR=ch);
}

int rec_dat(void)
{
while(!(U0LSR&0x01));
return(U0RBR);
}

void enroll(void)
{
int a, b, buff[12];

for(a=0;a<=11;a++)					
{
send_dat(capture[a]); 				 //send capture
}
for(b=0;b<12;b++)					
{
buff[b]=rec_dat();					 //receive capture ack 
}


if(buff[9]==0)						// check conformation
{	dat('a');
	for(a=0;a<=12;a++)					 
	{
	send_dat(character[a]); 			//send character
	}
	for(b=0;b<12;b++)
	{
	buff[b]=rec_dat();				    //receive character ack 
	}
	if(buff[9]==0)				  	    // check conformation
	{
	   dat('b');
		for(a=0;a<=14;a++)					 
		{
		send_dat(store_template[a]); 	    //send read_template
		}
		for(b=0;b<12;b++)
		{	
		buff[b]=rec_dat();				    //receive read_template ack 
		}
			if(buff[9]==0)					   	// check conformation
			{   //int i;
			    //cmd(0x01);
				cmd(0xc0);
				strdisp("successfull");
				delay();
				delay();
			    store_template[12]+=1;
				store_template[14]+=1;
				if(store_template[14]>0xff)
				store_template[13]+=1;
			}

				else if	(buff[9]==0x01)
		{
		  //cmd(0x01);
				cmd(0xc0);
				strdisp("error in rec");
					delay();
			    	delay();
		}

						else if	(buff[9]==0x0b)
		{
		  //cmd(0x01);
				cmd(0xc0);
				strdisp("fail to genreate");
					delay();
			    	delay();
		}

						else if	(buff[9]==0x18)
		{
		  //cmd(0x01);
				cmd(0xc0);
				strdisp("Pg ID not found");
					delay();
			    	delay();
		}
	}
}
else
	{
		//cmd(0x01);
	    cmd(0xc0);
		strdisp("unsucessfull");
		delay();
		delay();
	} 
}  //end of enroll function


void compare(void)
{
 int a, b, buff[12],buff1[12], buff2[16];

for(a=0;a<=11;a++)					
{
send_dat(capture[a]); 				 //send capture
}
for(b=0;b<12;b++)					
{
buff[b]=rec_dat();					 //receive capture ack 
}
 
if(buff[9]==0)						// check conformation
{	   dat('c');
	for(a=0;a<=12;a++)					 
	{
	send_dat(character[a]); 			//send character
	}
	for(b=0;b<12;b++)
	{
	buff1[b]=rec_dat();				    //receive character ack 
	}

	if(buff1[9]==0)				  	    // check conformation
	{	  dat('d');
		for(a=0;a<=16;a++)					 
		{
		send_dat(search[a]); 	    //send search
		}
		for(b=0;b<16;b++)
		{	
		buff2[b]=rec_dat();				    //receive search ack 
		}
		cmd(0xc0);
		dat(buff2[9]+0x30);
		
		if(buff2[9]==0)
		{
		 //cmd(0x01);
			//	cmd(0xc0);
				strdisp("matched");
				delay();
				delay();
		}
	else if	(buff2[9]==0x01)
		{
		  //cmd(0x01);
				cmd(0xc0);
				strdisp("error in rec");
					delay();
			    	delay();
		}

				else if (buff2[9]==0x09)
		{
		  //cmd(0x01);
				cmd(0xc0);
				strdisp("no matching");
					delay();
			    	delay();
		 }
	}}
	else
	   {
	   	    cmd(0xc0);
				strdisp("fail");} 

	}

/*void select_mode()
{
   int a;

	if (sw==1)
		{a++;
		while(sw==1);}

		    if(a==1)
				 {compare();}

			if(a==2)
				{enroll();}

		    if(a>2)
			a=0;
} */

void main()
{
    int a;

//char *ch="HELLO\n\r";
//unsigned int data;

IO0DIR=0x00003C00;
IO1DIR=0x01C00000;

cmd(0x28);
cmd(0x01);
cmd(0x06);
cmd(0x0c);
cmd(0x80);

VPBDIV=0x02;
PINSEL0=0X05;
U0LCR=0X83;
U0DLL=0XC3;
U0LCR=0X03;
 
/*strdisp("place finger");
delay();
delay();
delay();
delay();*/



while(1)
 {	  /*cmd(0x01);
    	cmd(0x80);
    	strdisp("Entered");
		delay();
		delay();*/
  
	 
	if (!sw)
		{
		a++;  
		while(!sw);
		}
		if(a>2)
		a=0;
	
	  	
 	switch(a)
		{
		 	case 1: cmd(0x01); cmd(0x80); strdisp("enroll"); enroll(); 	cmd(0x8f); dat(a+0x30);	delay();
			break;
			case 2 : cmd(0x01); cmd(0x80); strdisp("compare"); compare(); cmd(0x8f); dat(a+0x30); delay();
		    break;
			default : cmd(0x80); strdisp("place finger");  //delay();delay();
			break;
		}	
//select_mode();  
}		   
} 
